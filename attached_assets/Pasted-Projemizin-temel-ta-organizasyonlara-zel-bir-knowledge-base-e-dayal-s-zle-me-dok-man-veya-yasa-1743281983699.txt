Projemizin temel taşı, organizasyonlara özel bir knowledge base'e dayalı sözleşme, doküman veya yasal evrak analizi sistemi geliştirmektir. Bu sistem için aşağıdaki adımları izleyerek kodlama yapmanı istiyorum:
Dosya Yükleme ve İşleme:
Sistem için bir API route oluştur. Kullanıcıların dosyaları yükleyebileceği bu route, arka planda bir queue sistemi (örneğin, Redis) kullanarak yüklenen dosyaları performanslı bir şekilde işlesin.
Yüklenen dosya, metin tabanlı bir formata çevrilsin (örneğin, PDF veya DOCX dosyalarından metin çıkarılacak).
Çıkarılan metin, belirli boyutlarda chunk’lara bölünsün (örneğin, her chunk 1000 karakter olabilir).
Chunk’ların Embedding’e Dönüştürülmesi:
Chunk’lar, OpenAI’nin embedding API’si kullanılarak embedding formatına çevrilsin.
Bu işlem, performans için async ve batch tabanlı olsun. OpenAI’nin batch API’sini kullanabilirsin; bu nedenle chunk’ları toplu bir şekilde işleyecek bir algoritma kodla.
Embedding işlemleri tamamlandığında, her chunk için bir embedding vektörü elde edilecek.
Knowledge Base ile Fetch ve Skorlama:
Organizasyona özel knowledge base tablosunda, mevcut embedding’ler vector score’una göre taransın (örneğin, cosine similarity gibi bir algoritma ile).
Her chunk için en yüksek skora sahip 5 embedding (veya gerekirse 10) seçilsin. Bu seçim, analiz için kullanılacak en alakalı knowledge base verilerini temsil etsin.
Analiz ve Prompt Oluşturma:
Seçilen knowledge base embedding’leri ve analiz edilmesi gereken dokümandaki chunk’lar birleştirilerek tek bir bulk prompt oluşturulsun.
Prompt, hem knowledge base verilerini hem de analiz edilecek chunk’ları içerecek şekilde yapılandırılsın. Böylece yapay zeka, bu verilere dayanarak doğru bir analiz yapabilsin.
Oluşturulan prompt, OpenAI’nin o3-mini modeline uygun bir API’ye (örneğin, chat completions veya responses API) gönderilsin.
Analiz sonucu, kullanıcıya döndürülsün.
Performans ve Ölçeklenebilirlik:
Sistem, aynı anda binlerce kullanıcı tarafından kullanılabilir olmalı. Bu yüzden tüm işlemler (dosya yükleme, chunk’lama, embedding oluşturma, fetch ve analiz) async ve batch tabanlı olarak kodlansın.
Queue sistemi ile iş yükünü dengeli bir şekilde yönet. Gerekiyorsa, bu sistemin ölçeklenebilirliğini artırmak için ek optimizasyonlar yap.
Gelecek Genişletme için Hazırlık:
Sistem, ileride chat bazlı bir yapıya genişletileceği için kod modüler ve esnek olsun.
Şu an için chat route’larını kodlamana gerek yok, ancak knowledge base tarama, embedding ve batch API kısımlarını chat entegrasyonuna uyumlu olacak şekilde tasarla.
Ek Kurallar:
Bu sistem, projenin kalbidir ve ana işlevidir. Yalnızca yukarıda belirtilen adımları kodla; gereksiz eklemeler veya sistemin çalışır halini bozacak müdahaleler yapma.
Performans ve sağlamlık en yüksek önceliklidir. Kodun, yoğun kullanımda bile sorunsuz çalışmasını sağla.
Kodlamayı bitirdiğinde test etme; bana “Bitti” diyerek teslim et. Testleri ben yapacağım.
